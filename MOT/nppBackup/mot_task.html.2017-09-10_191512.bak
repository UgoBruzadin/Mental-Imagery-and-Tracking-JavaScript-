	    <!DOCTYPE html>
    <html lang="en">
	<title>MOT TASK</title>
    <head>
    </head>

    <body>
  
	<canvas id="canvas" Style="border: #fff solid" align="right"></canvas>
	
<script>

//this code was made by Ugo Bruzadin Nunes at Southern Illinois University - Carbondale, feb. 2017

var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');
document.body.style.background = 'black';
document.body.style.margin = 0;

document.addEventListener('contextmenu', event => event.preventDefault());

if ( !window.requestAnimationFrame ) {					 	// correct requestAnimationFrame for all browsers
	window.requestAnimationFrame = ( function() {
		return window.webkitRequestAnimationFrame ||
		window.mozRequestAnimationFrame ||
		window.oRequestAnimationFrame ||
		window.msRequestAnimationFrame ||
		function( /* function FrameRequestCallback */ callback, /* DOMElement Element */ element ) {
			window.setTimeout( callback, 1000 / 60 );
		};
	} )();
}

var w = window.innerWidth                     				 // correct widht and height for all browsers
		|| document.documentElement.clientWidth
		|| document.body.clientWidth;
var h = window.innerHeight
		|| document.documentElement.clientHeight
		|| document.body.clientHeight;
		
canvas.width = w*.99;
canvas.height = h*.99;

var colisionID = 1;											// 1 = colision ON (no overposition), 0 = colision OFF (balls can be overpositioned)

var instructionsID = true;									// true = start with instructions; false = no instructions
var trials = [];                                            // this is the array of trials

var bN;														// number of confounding balls
var tN = 4;													// number of tracked balls

var speed = canvas.height*0.0055;							// this variable counts the speed of the ball, but what speed (3 pixels/second? I don't know)
var radius = canvas.width*0.053;

var crossSize = canvas.height*0.04;							// total size of the middle cross
//!!!!!!!!//
//!!!!!!!!//
//!!!!!!!!//
var scoresPerTrial = []; //!!!!!!!!////!!!!!!!!//
//!!!!!!!!//
//!!!!!!!!//
//!!!!!!!!//
var scoresThisTrial = [];

var screenOffTimeStamp;

var totalScore = 0;											// total score across trials
var scoreNow;

var timesToPlay = 20;										// number of times to be played
var timesPlayed = 0;										// number of times that were played	

var clickToStartID = 0;										// if = 1, it starts the trials
var failIDNow = false;										// if true, the participant didn't click quick enough
var failTime = 15000;										// time that participant have to click the first ball

function getRandomInt(min, max) {							// function gets random integer bewteen two numbers, including both min and max.
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min + 1)) + min;
}
function negOrPos(){										// function gives randomly either -1 and 1. Usefull for coin flips.
	var coinFlip = getRandomInt(1, 4);
	var coin;
	if (coinFlip > 2){
		coin = 1; 
	} else{
		coin = -1;
	}
	return coin;
}

function trial(frames, bN, tN){
	var tracks = [];											// the array where the balls are stored
	
	var totalBalls = bN + tN;									// the total sum of balls
	var numberOfBalls = bN; 									// number of confounding balls
	var numberOfTracks = tN; 									// number of balls to be tracked to be tracked
	
	var correctedCanvasHeight = canvas.height - radius - 1;	 	// canvas corrected for the size of the ball
	var correctedCanvasWidth = canvas.width - radius - 1; 		// canvas corrected for the size of the ball
	
	var wrongBalls = 0; 										// number of wrong balls that were clicked
	var rightBalls = 0;											// number of right balls that were clicked
	
	var blinkCounter = 1;										// counter that if = 1, balls goes white, if = 0 balls goes 
	var blinkingNumber = 8 										// times the ball will blink > just chaning this number won't change the times it will blink, watch out
	
	var raf;													// Request Animation Frame >> variable gets request animation frame, or cancels it.
	var trackingID;												// when true, balls move, when false, balls stop
	var drawingID;												// when true, a lot of things happen, but mostly drawing the balls.
	
	var alreadyClicked = 0; 									// created to solve the clicking issue.
	var clickingID;												// if true, ball can be clicked
	var numClicks = 0; 	                                	    // this variable counts how many balls have been clicked
	var click = 'clicked in time';								// string added to know if subject clicked in time or not.
	
	var colisionCounter = 0;									// number of colisions tested
	var totalFrames = frames;									// number of frames to be updated per ball (every 60 frames is a second)
	var framesPlayed = 0;										// number of frames that are ++ for each update (until it reaches the # of totalFrames)
	
	var startTimestamp;											// timestamps when balls start moving
	var clickTimestamp;											// timestamps when balls stop moving (and clicking is allowed)
	var stopTimestamp;											// timestamps when clicking ended.

	var stopTime = 10000;										// if colisionID = 0, stops at x milliseconds
	
	var screenOff = [];											// array containing the timestamps of when the screen wasn't full
	
	function randomBetween(min, max) { 							// this function calculates random numbers between two given numbers
		return min + Math.random() * (max - min);
	}//end randomBetween

		//setting and shuffling types and numbers of balls
	function shuffle(array) {
		var currentIndex = array.length, temporaryValue, randomIndex;

		// While there remain elements to shuffle...
		while (0 !== currentIndex) {

			// Pick a remaining element...
			randomIndex = Math.floor(Math.random() * currentIndex);
			currentIndex -= 1;

			// And swap it with the current element.
			temporaryValue = array[currentIndex];
			array[currentIndex] = array[randomIndex];
			array[randomIndex] = temporaryValue;
		}
	  return array;
	}

	var arr = [];
	
	for(var t = 0; t < totalBalls; t++){
		arr.push(t);
	}
	arr = shuffle(arr);
	
	for(var t = 0; t < totalBalls; t++){
		if (arr[t] < (tN )){
			tracks.push(new track(t, 1));
		} else {
			tracks.push(new track(t, 0));
		}
	}
	
	function cross(){											//design the cross in the middle of the canvas
		var middleCanvasHeight = canvas.width*0.5
		var middleCanvasWidth = canvas.height*0.5
		ctx.beginPath();
		ctx.lineWidth = 1;
		ctx.moveTo((middleCanvasHeight-(crossSize/2)),middleCanvasWidth);
		ctx.lineTo((middleCanvasHeight+(crossSize/2)),middleCanvasWidth);
		ctx.lineWidth = 1;
		ctx.moveTo(middleCanvasHeight,(middleCanvasWidth-(crossSize/2)));
		ctx.lineTo(middleCanvasHeight,(middleCanvasWidth+(crossSize/2)));
		ctx.closePath();
		ctx.strokeStyle="white";
		ctx.stroke();
	}
	
	function track(i_not, b){										//BALLS; i_not  = ball number, if b = 1, correct ball, blinks 
	
		this.xPos = randomBetween(radius + 1, correctedCanvasWidth - radius - 1); 	
		this.yPos = randomBetween(radius + 1, correctedCanvasHeight - radius - 1);
		this.vxPos = randomBetween(-speed, speed); 								// amount of x gained per pixels/sec (based on speed)
		this.vyPos = negOrPos()*Math.sqrt((Math.pow(speed, 2))-(Math.pow(this.vxPos, 2)));  // amount of y gained por time (pitagoras)
		this.xPosFinal;
		this.yPosFinal;
		
		this.gotPos = false; // once initial colision is tested, it goes true, and final colision is tested.
		
		this.thickness = 1;													// determines the thickness of the ball
		this.radius = radius; 												// refers to the radius of the balls
		this.color = 'blue';												// refers to the center color of the ball
		this.clickID = true;												// makes the balls not be clicable after being clicked once.
		
		if(colisionID == 1){ // checks for initial colision of the balls 
			if(i_not > 0){
				for(j = 0; j < i_not; j){
					var dx = (this.xPos + radius) - (tracks[j].xPos + radius);
					var dy = (this.yPos + radius) - (tracks[j].yPos + radius);
					var distance = Math.sqrt((dx * dx) + (dy * dy));
					if (distance < (radius + radius + 1)) {
						j = 0;
						this.xPos = randomBetween((radius + 1), (correctedCanvasWidth - radius - 1));
						this.yPos = randomBetween((radius + 1), (correctedCanvasHeight - radius - 1));
					} else {
					j++;
					}
				}
			}
			this.gotPos = true;
		}
		
		if(colisionID == 1 && this.gotPos == true){ // checks for final colision of the balls
			this.xPosFinal = this.xPos;
			this.yPosFinal = this.yPos;
			
			if (i_not === 0){
				this.xcounter = 1;
				this.ycounter = 1;
				for (i = 0; i < totalFrames; i++){
					this.xPosFinal += this.vxPos;
					this.yPosFinal += this.vyPos;
					if (this.xPosFinal + this.vxPos > correctedCanvasWidth || this.xPosFinal + this.vxPos - radius < 0) {
						this.vxPos = -this.vxPos;
						this.xcounter *= -1;
					}
					if (this.yPosFinal + this.vyPos > correctedCanvasHeight || this.yPosFinal + this.vyPos - radius < 0) {
						this.vyPos = -this.vyPos;
						this.ycounter *= -1;
					}				
				}
				if (this.xcounter < 0){
					this.vxPos *= -1;
					}
				if (this.ycounter < 0){
					this.vyPos *= -1;
				}
			}
			for(j = 0; j < i_not; j){
				this.xcounter = 1;
				this.ycounter = 1;
				this.xPosFinal = this.xPos;
				this.yPosFinal = this.yPos;
				for (i = 0; i < totalFrames; i++){
					this.xPosFinal += this.vxPos;
					this.yPosFinal += this.vyPos;
					if (this.xPosFinal + this.vxPos > correctedCanvasWidth || this.xPosFinal + this.vxPos - radius < 0) {
						this.vxPos = -this.vxPos;
						this.xcounter *= -1;
					}
					if (this.yPosFinal + this.vyPos > correctedCanvasHeight || this.yPosFinal + this.vyPos - radius < 0) {
						this.vyPos = -this.vyPos;
						this.ycounter *= -1;
					}				
				}
				if (this.xcounter < 0){
					this.vxPos *= -1;
					this.xcounter = 1;
				}
				if (this.ycounter < 0){
					this.vyPos *= -1;
					this.ycounter = 1;
				}
				if(i_not > 0){		// this compare the final position of this ball with the other balls; if the colide, gives them a new position until they don't colide anymore
					var dxf = (this.xPosFinal) - (tracks[j].xPosFinal);
					var dyf = (this.yPosFinal) - (tracks[j].yPosFinal);
					var distancefinal = Math.sqrt((dxf * dxf) + (dyf * dyf));
					if (distancefinal < (radius + radius + 1)) {
						this.vxPos = randomBetween(-speed, speed);
						this.vyPos = negOrPos()*Math.sqrt((Math.pow(speed, 2))-(Math.pow(this.vxPos, 2)));
						this.xPosFinal = this.xPos;
						this.yPosFinal = this.yPos;
						j = 0;
					} else {
					j++;
					}	
				}
				//console.log(i_not + 'this balls final positions are ' + this.xPosFinal + ' and '+ this.yPosFinal); 
			}
			colisionCounter += 1;
		} else {
			this.vxPos = randomBetween(-speed, speed);
			this.vyPos = negOrPos()*Math.sqrt((Math.pow(speed, 2))-(Math.pow(this.vxPos, 2)));
			colisionCounter += 1;
		}
		
		this.draw = function(ctx) {					// fuctions that draws the balls
			if(b == 1){								//blinks the balls, if the balls blinks (if b=1)
				if(blinkCounter == 1 || blinkCounter == 3 || blinkCounter == 5 || blinkCounter == 7){
					tracks[i_not].color = 'white';
					
				}if(blinkCounter == 2 || blinkCounter == 4 || blinkCounter == 6 || blinkCounter == 8){
					tracks[i_not].color = 'blue';
				}
			}//end if
			ctx.beginPath();
			ctx.arc(this.xPos, this.yPos, this.radius, 0, Math.PI * 2, true);
			ctx.closePath();
			ctx.fillStyle = tracks[i_not].color;
			ctx.fill();
			ctx.lineWidth = this.thickness;
			ctx.strokeStyle = 'white';
			ctx.stroke();
			if (clickingID === true){						// event listener for ball clicking, after the ball as stopped moving.
				addEventListener('click', function(event){
				var xie = event.clientX;
				var yie = event.clientY;
				var xDie = xie - tracks[i_not].xPos;
				var yDie = yie - tracks[i_not].yPos;
				var deltaDie = Math.sqrt(Math.pow(yDie, 2) + Math.pow(xDie, 2));
					if (clickingID === true && deltaDie < tracks[i_not].radius && tracks[i_not].clickID === true && numClicks < numberOfTracks){
						tracks[i_not].color = 'green';
						tracks[i_not].thickness = 2;
						tracks[i_not].clickID = false;
						clickerTimeout();
						numClicks += 1;
						if (b == 1) {
							rightBalls++;
						}
						if (b == 0) {
							wrongBalls++;
						}
					}
				}, false); //end event
			}//end if
		}//end draw
		
		this.update = function(){     						// this function is the one that updates it balls' positions according to their speed.
			this.xPos += this.vxPos;
			this.yPos += this.vyPos;
			if (this.yPos + this.vyPos > correctedCanvasHeight || this.yPos + this.vyPos - radius < 0) {
				this.vyPos = -this.vyPos;
			}
			if (this.xPos + this.vxPos > correctedCanvasWidth || this.xPos + this.vxPos - radius < 0) {
				this.vxPos = -this.vxPos;
			}			
		}//end of update
	}//end track

	// initial blinking code and timer outside the function I know it look stupid, but it doesnt need to be very good.
	function tic(){	
		if(blinkCounter === 1 || blinkCounter === 3 || blinkCounter === 5 || blinkCounter === 7){
			blinkCounter += 1;
			setTimeout(tac, 300);
		}
	}
	function tac(){	
		if(blinkCounter === 2 || blinkCounter === 4 || blinkCounter === 6 || blinkCounter === 8){
			blinkCounter += 1;
			setTimeout(tic, 300);
		}
	}
	if(blinkCounter > blinkingNumber){
		blinkingCounter = 0;
	}
	//animation 
	
	var screenOffID = false;
	var screenOnID;
	var screenOnTimeStamp;
	var screenOffDate;
	var screenOnDate;
	var screenOn = [];
	
	window.addEventListener("resize", checkScreen());
	
	function checkScreen(){
		var wh = window.innerHeight;
		var ww = window.innerWidth;
		if (screenOffID === false){
			if (screen.width != ww || screen.height != wh){
				screenOffDate = new Date();
				screenOffTimeStamp = screenOffDate.getTime()
				screenOff.push ("Screen was off at " + screenOffDate);
				screenOffID = true;
			}
		} else {
			if (screen.width === ww && screen.height === wh){
				screenOnDate = new Date();
				screenOnTimeStamp = screenOnDate.getTime()
				screenOff.push ("Screen was back on at " + screenOnDate);
				screenOffID = false;
				//console.log (screenOff);
			}
		}
	}

	
	function animate(){                                        //this function clears canvas, draws the balls, updates the animation and stops everything once it needs to stop.
		if(trackingID === true){
			ctx.clearRect(0,0, canvas.width, canvas.height)
			for(var i = 0; i < totalBalls; i++){					//sets the update
				tracks[i].update();
				framesPlayed++;
			}//end for
		}//end if
		if(drawingID === true){
			ctx.clearRect(0,0, canvas.width, canvas.height);
			for(var i = 0; i < totalBalls; i++){            		// begins drawing
				tracks[i].draw(ctx);
				//cross();
				
			}//end for
			raf = window.requestAnimationFrame(animate);			// starts the animation
			if(numClicks === numberOfTracks){						// this function stops everything
				drawingID = false;									// stops drawing
				clickingID = false;									// stops clicking
				trackingID = false;									// stops updating
				timesPlayed++;										// adds 1 to total times played
				totalScore += rightBalls;							// adds total right balls to total score
				scoreNow = rightBalls;								// scoreNow gets the rightBalls
				displayScoreTimed();								// starts timer to display score
				var today = new Date();
				stopTimestamp = today.getTime();
				clickingTime = (stopTimestamp - clickTimestamp);
				var totalTime = (stopTimestamp - startTimestamp);
				
				
				//!!!!!!!!//
				//!!!!!!!!//
				//!!!!!!!!//
				//!!!!!!!!//
				scoresPerTrial.push (timesPlayed, rightBalls, click, clickingTime, totalTime, screenOff);
				//scoresPerTrial.push (scoresThisTrial);
				//!!!!!!!!//
				//!!!!!!!!//
				//!!!!!!!!//
				//!!!!!!!!//
				//!!!!!!!!//
				nextTrialTimed();									// starts timer to start next trial
			}
			if (clickingID === false && colisionID === 1 && framesPlayed === totalFrames * totalBalls && framesPlayed != 0 && alreadyClicked === 0){  // if colisionID = 1, stops when the all the frames have been played
				trackingID = false;									// stops updating
				clickingID = true;									// allows clicking to start clicking
				document.body.style.cursor = 'pointer'
				var today = new Date();
				clickTimestamp = today.getTime();
				alreadyClicked = 1;
				setTimeout (fail, failTime);
			}	
		}
	}//end animate
	//Beggining and ending; timers and functions
		
	function fail(){
		if (numClicks === 0){
			ctx.clearRect(0,0, canvas.width, canvas.height);
			failIDNow = true;
			drawingID = false;									// stops drawing
			clickingID = false;									// stops clicking
			trackingID = false;									// stops updating
			timesPlayed++;										// adds 1 to total times played
			displayScore();
			var today = new Date();
			stopTimestamp = today.getTime();
			clickingTime = (stopTimestamp - clickTimestamp);
			var totalTime = (stopTimestamp - startTimestamp);
			click = 'failed to click in time';
			//!!!!!!!!//
			//!!!!!!!!//
			//!!!!!!!!//
			//!!!!!!!!//
			scoresPerTrial.push (timesPlayed, rightBalls, click, clickingTime, totalTime, screenOff);
			//!!!!!!!!//
			//!!!!!!!!//
			//!!!!!!!!//
			//!!!!!!!!//
			
			nextTrialTimed();
		}
	}
	
	function clickerTimeout(){									// makes sure that only 1 ball is clicked within 10 milliseconds, helps with lag
		clickingID = false;
		setTimeout(allowClickingAgain, 10);
	}
	function timeoutStart(){
		setTimeout(startTracking, 3300);
	}
	function startTracking(){
		trackingID = true;
		clickingID = false;
		var today = new Date();
		startTimestamp = today.getTime();
	}
	function allowClickingAgain(){
		trackingID = false;
		clickingID = true;
	}
	function timeoutStop(){
		if(colisionID === 0){
			setTimeout(allowClickingAgain, stopTime);
		}	
	}
	if(colisionCounter == totalBalls){
		start();
	}
	function start(){
		if(numClicks < numberOfTracks){//starts everything!
			drawingID = true;
			raf = window.requestAnimationFrame(animate);
			setTimeout(tic(), 300);
			timeoutStart();
			timeoutStop();
		}
	}
}// end trial	

if(instructionsID == true){
	function instructions(){
		ctx.clearRect(0,0, canvas.width, canvas.height)
		ctx.font = '48px serif';
		ctx.fillStyle = 'white';
		ctx.textAlign = "center";
		ctx.fillText('Track the balls that blink', (canvas.width/2), (0.4*canvas.height));
		//ctx.fillText('Keep your attention in the central cross', (canvas.width/2), (0.5*canvas.height));	
		ctx.fillText('Click anywhere to start the task', (canvas.width/2), (0.6*canvas.height));
		setTimeout (clickToStart, 2000);
	}	
}
function clickToStart(){
	addEventListener('click', function() {
		if (clickToStartID == 0){
			startTrial()
		}
	}, false);
}				

//beggining and ending timers and functions

function displayStart(){
	if (timesPlayed < timesToPlay){
		ctx.clearRect(0,0, canvas.width, canvas.height)
		ctx.font = '48px serif';
		ctx.fillStyle = 'red';
		ctx.textAlign = "center";
		ctx.fillText('Trial ' + (timesPlayed + 1), (canvas.width/2), (0.5*canvas.height));
	}
}

function nextTrialTimed(){
	setTimeout (displayStart, 2000);
	setTimeout (nextTrial, 4000);
}
function nextTrial(){										// start a new trial
	if(timesPlayed < timesToPlay){
		failIDNow = false;
		document.body.style.cursor = 'none'
		trials.push(new trial(600, 4, 4));					// (frames, tracked balls, untracked balls) 
	}
}
function startTrial(){										// start 
	document.body.style.cursor = 'none'
	displayStart();
	setTimeout (nextTrial, 2000);
	clickToStartID = 1;
}

function displayScoreTimed(){							// timer to display score (after clicking ended)
	setTimeout(displayScore, 100);
}	
function displayScore(){								// function that draws the text that displays the score at the end of the trial
	ctx.font = '48px serif';
	ctx.fillStyle = 'red';
	if(timesPlayed === timesToPlay){
	
			// THIS <IF> IS THE END OF THE TASK!!! 
			//!!!!!!!!//
			//!!!!!!!!//
			//!!!!!!!!//
			//!!!!!!!!//
		ctx.clearRect(0,0, canvas.width, canvas.height)
		ctx.fillText('Saving data and loading next task, please wait.' , canvas.width/2, canvas.height/2);
		//console.log (scoresPerTrial);
		startNextPage();
		//!!!!!!!!//
		//!!!!!!!!//
		//!!!!!!!!//
		//!!!!!!!!//
		
	} 
	if(failIDNow === true && timesPlayed < timesToPlay){
		ctx.fillText('Too slow!', (canvas.width/2), (0.5*canvas.height));
	}
}

function startNextPage(){

	location.replace("./mot_finish.html");

}

instructions();


	</script>
	</body>